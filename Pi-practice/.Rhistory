shape = 23, colour = "blue", fill ="yellow", size = 2.5)
str(mpg)
?mpg
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 23, colour = "blue", fill ="yellow", size = 2.5, stroke = 5)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 23, colour = "blue", fill ="yellow", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 23, colour = "blue", fill ="yellow", size = 2.5, stroke = 0)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 23, colour = "blue", fill ="yellow", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, colour = displ < 5))
unique(class)
unique(mpg$class)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv~cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv~ .)
unique(mpg$drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(~drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(.~cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(cyl~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap(.~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(class~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv~cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(.~class)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv~cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth() +
geom_point()
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth(mapping = aes(linetype=drv)) +
geom_point()
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth(mapping = aes(linetype=drv)) +
geom_point(size = 0.5)
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth(mapping = aes(linetype=drv)) +
geom_point(size = 1)
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth(mapping = aes(linetype=drv)) +
geom_point(aes(colour=class),size = 1)
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth() +
geom_point(aes(colour=class),size = 1)
?geom_smooth
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth(se = FALSE) +
geom_point(aes(colour=class),size = 1)
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth(data = filter(mpg, class == "subcompact"),se = FALSE) +
geom_point(aes(colour=class),size = 1)
unique(mpg$class)
ggplot(data = mpg, mapping = aes(x=displ, y=hwy)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE) +
geom_point(aes(colour=class),size = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 23, colour = "blue", fill ="yellow", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 23, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 16, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 11, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 12, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 21, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 22, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 23, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 24, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 21, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 21, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 21, colour = "blue", fill ="cyan", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 21, colour = "blue", fill ="pink", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 21, colour = "blue", fill ="yello", size = 2.5, stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha = class),
shape = 21, colour = "blue", fill ="yellow", size = 2.5, stroke = 1)
25+25+25+30+30+40+45+50+100+110
480+45
(25/34)*20 + (24/30)*30
(12/20)*34
(11/20)*34
(12/20)*34
(25/34)*20
Quiz1 = (25/34)*20
A2 = 24
LosFrQ1 = 20 - Quiz1
LosFrQ1
LosFrQ1 + 6
9/20
0.45*34
Need = 50 - (Quiz1 - A2)
0.45*34
Need
Need = 50 - (Quiz1 + A2)
Need
FrQuiz2 = (Need/20) * 34
print(FrQuiz2)
(28/34)*20
(28/34)*20 + Quiz1 + A2
4300/2.5
10/(1.06) + 10/(1.06)^2 + 10/(1.06)^3 + 10/(1.06)^4 + 10/(1.06)^5 + 10/(1.06)^6 + 10/(1.06)^7 + 10/(1.06)^8
10/(1.06) + 10/(1.06)^2 + 10/(1.06)^3 + 10/(1.06)^4 + 10/(1.06)^5 + 10/(1.06)^6 + 10/(1.06)^7 + 10/(1.06)^8
+ 10/(1.06)^9 + 10/(1.06)^10 + 10/(1.06)^11 + 10/(1.06)^12 + 10/(1.06)^13 + 10/(1.06)^14
+ 10/(1.06)^15 + 10/(1.06)^16 + 10/(1.06)^17 + 10/(1.06)^18 + 10/(1.06)^19 + 110/(1.06)^20
A = 10/(1.06) + 10/(1.06)^2 + 10/(1.06)^3 + 10/(1.06)^4 + 10/(1.06)^5 + 10/(1.06)^6 + 10/(1.06)^7 +
10/(1.06)^8 + 10/(1.06)^9 + 10/(1.06)^10 + 10/(1.06)^11 + 10/(1.06)^12 + 10/(1.06)^13 +
10/(1.06)^14 + 10/(1.06)^15 + 10/(1.06)^16 + 10/(1.06)^17 + 10/(1.06)^18 + 10/(1.06)^19 + 110/(1.06)^20
print(A)
10/(1.06)^2
10/((1.06)^2)
10/(1.06)^19
A = 10/(1.06) + 10/(1.06)^2 + 10/(1.06)^3 + 10/(1.06)^4 + 10/(1.06)^5 + 10/(1.06)^6 + 10/(1.06)^7 +
10/(1.06)^8 + 10/(1.06)^9 + 10/(1.06)^10 + 10/(1.06)^11 + 10/(1.06)^12 + 10/(1.06)^13 +
10/(1.06)^14 + 10/(1.06)^15 + 10/(1.06)^16 + 10/(1.06)^17 + 10/(1.06)^18 + 10/(1.06)^19 + 110/(1.06)^20
print(A)
B = 20/(1.06) + 20/(1.06)^2 + 20/(1.06)^3 + 20/(1.06)^4 + 20/(1.06)^5 + 20/(1.06)^6 + 20/(1.06)^7 +
20/(1.06)^8 + 20/(1.06)^9 + 20/(1.06)^20 + 20/(1.06)^11 + 20/(1.06)^12 + 20/(1.06)^13 +
20/(1.06)^14 + 20/(1.06)^15 + 20/(1.06)^16 + 20/(1.06)^17 + 20/(1.06)^18 + 20/(1.06)^19 + 120/(1.06)^20
print(B)
B = 10/(1.12) + 10/(1.12)^2 + 10/(1.12)^3 + 10/(1.12)^4 + 10/(1.12)^5 + 10/(1.12)^6 + 10/(1.12)^7 +
10/(1.12)^8 + 10/(1.12)^9 + 10/(1.12)^10 + 10/(1.12)^11 + 10/(1.12)^12 + 10/(1.12)^13 +
10/(1.12)^14 + 10/(1.12)^15 + 10/(1.12)^16 + 10/(1.12)^17 + 10/(1.12)^18 + 10/(1.12)^19 + 110/(1.12)^20
print(B)
C = 10/(1.1236) + 10/(1.1236)^2 + 10/(1.1236)^3 + 10/(1.1236)^4 + 10/(1.1236)^5 + 10/(1.1236)^6 + 10/(1.1236)^7 +
10/(1.1236)^8 + 10/(1.1236)^9 + 10/(1.1236)^10 + 10/(1.1236)^11 + 10/(1.1236)^12 + 10/(1.1236)^13 +
10/(1.1236)^14 + 10/(1.1236)^15 + 10/(1.1236)^16 + 10/(1.1236)^17 + 10/(1.1236)^18 + 10/(1.1236)^19 + 110/(1.1236)^20
print(C)
C = 10.25/(1.1236) + 10.25/(1.1236)^2 + 10.25/(1.1236)^3 + 10.25/(1.1236)^4 + 10.25/(1.1236)^5 + 10.25/(1.1236)^6 + 10.25/(1.1236)^7 +
10.25/(1.1236)^8 + 10.25/(1.1236)^9 + 10.25/(1.1236)^10.25 + 10.25/(1.1236)^11 + 10.25/(1.1236)^12 + 10.25/(1.1236)^13 +
10.25/(1.1236)^14 + 10.25/(1.1236)^15 + 10.25/(1.1236)^16 + 10.25/(1.1236)^17 + 10.25/(1.1236)^18 + 10.25/(1.1236)^19 + 110.25/(1.1236)^20
print(C)
1,2,3
mean(1,2,3,4)
a <- [2,4,6]
a <- (2,4,6)
3
(1+500+5)/3
(2+4)/2
clear
clear(all)
clear all
clc
rm()
rm(all)
3
(1+500+5)/3
(2+4)/2
0.223*165192
y1 <- 789+638
y1 <- 789+638
y2 <- 872 + 635
y3 <- 854 + 742
y4 <- 878 + 801
y5 <- 890 +873
y2 - y1
y3-y2
y4-y3
y5-y4
742 - 635
801 - 742
873 - 801
y6 <- 0.05 * 890 + 0.04 * 873
y6 <- 890 + 0.05 * 890 + 873 + 0.04 * 873
y5 <- 890 +873
y6 - y5
(57823 - 48902)/57823
(57823+103265+93754 - 78023)/(57823+103265+93754)
FT <- 0.22*78023 + 0.55*57823
PT <- (1-0.22)*78023 + (1-0.55)*57823
FT - PT
(8.8+11+7.8+10.5)/4
980*0.7*26.8*10^6
pension <- 0.32 * 26.8*10^6 * 410
pension <- 0.32 * 26.8*10^6 * 410
health <- 0.28 * 26.8*10^6 * 280
pension/health
5/3
8/7
0.1 * 26.8*10^6 * 210
0.15 * 26.8*10^6 * 210
0.13 * 26.8*10^6 * 210
0.12 * 26.8*10^6 * 210
S_USD.AUD = 0.77
S_Euro.AUD = 0.63
S_GBP.AUD = 0.55
inf_US = 2.4%
inf_UK = 2.2%
inf_Euro = 1.6%
inf_Au = 2.4%
int_US = 3%
int_UK = 1%
int_Euro = 0.25%
int_Au = 2%
2.4
0.77
inf_US <- 2.4%
inf_UK <- 2.2%
inf_Euro <- 1.6%
inf_Au <- 2.4%
inf_US
pi_US <- 2.4%
S_USD.AUD <- 0.77
inf_US <- 2.4%
inf_US <- 2.4/100
S_USD.AUD <- 0.77
S_Euro.AUD <- 0.63
S_GBP.AUD <- 0.55
inf_US <- 2.4/100
inf_UK <- 2.2/100
inf_Euro <- 1.6/100
inf_Au <- 2.4/100
int_US <- 3/100
int_UK <- 1/100
int_Euro <- 0.25/100
int_Au <- 2/100
S_USD.AUD_PPP <- S_USD.AUD * ((1+inf_US)/(1+inf_Au))
S_Euro.AUD_PPP <- S_Euro.AUD * ((1+inf_Euro)/(1+inf_Au))
S_GBP.AUD_PPP <- S_GBP.AUD * ((1+inf_UK)/(1+inf_Au))
S_USD.AUD <- 0.77
S_Euro.AUD <- 0.63
S_GBP.AUD <- 0.55
inf_US <- 2.4/100
inf_UK <- 2.2/100
inf_Euro <- 1.6/100
inf_Au <- 2.4/100
int_US <- 3/100
int_UK <- 1/100
int_Euro <- 0.25/100
int_Au <- 2/100
# Relative PPP
S_USD.AUD_PPP <- S_USD.AUD * ((1+inf_US)/(1+inf_Au))
print(S_USD.AUD_PPP)
S_Euro.AUD_PPP <- S_Euro.AUD * ((1+inf_Euro)/(1+inf_Au))
print(S_Euro.AUD_PPP)
S_GBP.AUD_PPP <- S_GBP.AUD * ((1+inf_UK)/(1+inf_Au))
print(S_GBP.AUD_PPP)
S_USD.AUD_IF <- S_USD.AUD * ((1+in6_US)/(1+int_Au))
print(S_USD.AUD_IF)
S_Euro.AUD_IF <- S_Euro.AUD * ((1+int_Euro)/(1+int_Au))
print(S_Euro.AUD_IF)
S_GBP.AUD_IF <- S_GBP.AUD * ((1+int_UK)/(1+int_Au))
print(S_GBP.AUD_IF)
# International Fisher
S_USD.AUD_IF <- S_USD.AUD * ((1+int_US)/(1+int_Au))
print(S_USD.AUD_IF)
S_Euro.AUD_IF <- S_Euro.AUD * ((1+int_Euro)/(1+int_Au))
print(S_Euro.AUD_IF)
S_GBP.AUD_IF <- S_GBP.AUD * ((1+int_UK)/(1+int_Au))
print(S_GBP.AUD_IF)
Now_Euro <- 1000*S_Euro.AUD_PPP
NextyearAUwithEU <- Now_Euro/S_Euro.AUD_PPP
NextyearAUwithEU -1000
Now_Euro <- 1000*S_Euro
NextyearAUwithEU <- Now_Euro/S_Euro.AUD_PPP
NextyearAUwithEU -1000
Now_Euro <- 1000*S_Euro.AUD
NextyearAUwithEU <- Now_Euro/S_Euro.AUD_PPP
NextyearAUwithEU -1000
630/0.6251
550/0.5489
200000/1000*2.4
800000/1000*7.8
800000/1000*7.8 + 200000/1000*2.4
800000/1000*7.8 + 200000/1000*2.4
S_USD.AUD <- 0.77
S_Euro.AUD <- 0.63
S_GBP.AUD <- 0.55
inf_US <- 2.4/100
inf_UK <- 2.2/100
inf_Euro <- 1.6/100
inf_Au <- 2.4/100
int_US <- 3/100
int_UK <- 1/100
int_Euro <- 0.25/100
int_Au <- 2/100
# Relative PPP
S_USD.AUD_PPP <- S_USD.AUD * ((1+inf_US)/(1+inf_Au))
print(S_USD.AUD_PPP)
S_Euro.AUD_PPP <- S_Euro.AUD * ((1+inf_Euro)/(1+inf_Au))
print(S_Euro.AUD_PPP)
S_GBP.AUD_PPP <- S_GBP.AUD * ((1+inf_UK)/(1+inf_Au))
print(S_GBP.AUD_PPP)
# International Fisher
S_USD.AUD_IF <- S_USD.AUD * ((1+int_US)/(1+int_Au))
print(S_USD.AUD_IF)
S_Euro.AUD_IF <- S_Euro.AUD * ((1+int_Euro)/(1+int_Au))
print(S_Euro.AUD_IF)
S_GBP.AUD_IF <- S_GBP.AUD * ((1+int_UK)/(1+int_Au))
print(S_GBP.AUD_IF)
# invest
Now_Euro <- 1000*S_Euro.AUD
NextyearAUwithEU <- Now_Euro/S_Euro.AUD_PPP
NextyearAUwithEU -1000
80000000/1000*7.8 + 20000000/1000*2.4
(1+2+47+789)/4
install.packages("tidyverse")
library(tidyverse)    # load package to use
install.packages(c("ncflights13", "gapminder", "Lahman")) # these packages provide data needed
tidyverse_update()
dput(mtcars)
mtcars <- structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,
3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), .Names = c("mpg", "cyl", "disp", "hp",
"drat", "wt", "qsec", "vs", "am", "gear", "carb"), row.names = c("Mazda RX4",
"Mazda RX4 Wag", "Datsun 710", "Hornet 4 Drive", "Hornet Sportabout",
"Valiant", "Duster 360", "Merc 240D", "Merc 230", "Merc 280",
"Merc 280C", "Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
mtcars
mtcars <- structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,                                                                                                                                                                               3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), .Names = c("mpg", "cyl", "disp", "hp",
"drat", "wt", "qsec", "vs", "am", "gear", "carb"), row.names = c("Mazda RX4",
"Mazda RX4 Wag", "Datsun 710", "Hornet 4 Drive", "Hornet Sportabout",
"Valiant", "Duster 360", "Merc 240D", "Merc 230", "Merc 280",
"Merc 280C", "Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
mtcars
ggplot2::mpg
mpg
?mpg
rm(list=ls())
x <- 2
g <- function(){
y <- 1
c(x,y)
}
g()
rm(g)
j <- function(x){
y <- 2
function(){
c(x,y)
}
}
k <- j(1)
k
k()
#
array(1:5, c(1,1,5))
#
array(1:5, c(1,5,1))
?outer
c(4, 1, 2, 1) / c(2, 1, 2, 1)
c(4, 1, 2, 1) ./ c(2, 1, 2, 1)
c(4, 1, 2, 1) * c(2, 1, 2, 1)
c(4, 1, 2, 1) .* c(2, 1, 2, 1)
shinyApp(ui, server)
library(shiny)
server <- function(input, output){}
ui <- fluidPage()
server <- function(input, output){}
shinyApp(ui, server)
source('~/.active-rstudio-document', echo=TRUE)
fluidPage("Testing clean template")
?sliderInput
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
?hist
?rnorm
runApp('Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice/Script1.R')
install.packages('rsconnect')
library('rsconnect')
rsconnect::setAccountInfo(name='ptran', token='45FE5D255EF8ABE12E46191EDDCC6843', secret='xfB0IKJ6Cw8a9Q4fEzaSOF1moB5WRknnS7uZ77m8')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ptran', token='45FE5D255EF8ABE12E46191EDDCC6843', secret='xfB0IKJ6Cw8a9Q4fEzaSOF1moB5WRknnS7uZ77m8')
rsconnect::setAccountInfo(name='ptran', token='45FE5D255EF8ABE12E46191EDDCC6843', secret='xfB0IKJ6Cw8a9Q4fEzaSOF1moB5WRknnS7uZ77m8')
library(rsconnect)
rsconnect::setAccountInfo(name='ptran', token='45FE5D255EF8ABE12E46191EDDCC6843', secret='xfB0IKJ6Cw8a9Q4fEzaSOF1moB5WRknnS7uZ77m8')
getwd()
setwd("~/Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice")
library(rsconnect)
rsconnect::deployApp("~/Desktop/R/Shiny_tutorials/shiny.rstudio.com-tutorial/Pi-practice")
library(shiny); runApp('Script1.R')
runApp('Script1.R')
